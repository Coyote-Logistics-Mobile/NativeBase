{"version":3,"sources":["../../../../src/basic/Icon/index.js"],"names":["IS_IOS","Platform","OS","Icon","c","_root","variables","context","theme","variable","platformStyle","props","type","iconFamily","ic","name","iconSet","iconMap","active","ios","default","android","setRoot","getIconName","getName","React","PureComponent","contextTypes","PropTypes","object","propTypes","IconNB","style","oneOfType","number","array","string","bool","StyledIcon","mapPropsToStyleNames"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Platform } from 'react-native';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport variable from '../../theme/variables/platform';\nimport mapPropsToStyleNames from '../../utils/mapPropsToStyleNames';\nimport { IconNB } from '../IconNB';\n\nimport ic from './NBIcons.json';\n\n\nconst IS_IOS = Platform.OS === 'ios';\n\n\nclass Icon extends React.PureComponent {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  setRoot(c){\n    this._root = c;\n  }\n\n  getName() {\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n\n    if ((this.props.type || variables.iconFamily) === 'Ionicons') {\n      if (typeof ic[this.props.name] !== 'object') {\n        return this.props.name;\n      }\n    } else if (variables.iconSet && variables.iconMap) {\n      if (typeof variables.iconMap[this.props.name] !== 'object') {\n        return this.props.name;\n      } else if (typeof variables.iconMap[this.props.name] === 'object') {\n        let name;\n        if (IS_IOS && platformStyle !== 'material') {\n          name = this.props.active\n            ? variables.iconMap[this.props.name].ios.active\n            : variables.iconMap[this.props.name].ios.default;\n        } else {\n          name = this.props.active\n            ? variables.iconMap[this.props.name].android.active\n            : variables.iconMap[this.props.name].android.default;\n        }\n        return name;\n      }\n    }\n    return this.props.name;\n  }\n\n  getIconName() {\n    if (IS_IOS) {\n      if (this.props.ios) {\n        return this.props.ios;\n      }\n      return this.props.active\n        ? ic[this.props.name].ios.active\n        : ic[this.props.name].ios.default;\n    } else if (this.props.android) {\n      return this.props.android;\n    }\n    return this.props.active\n      ? ic[this.props.name].android.active\n      : ic[this.props.name].android.default;\n  }\n\n  render() {\n    if (this.props.ios && this.props.android) {\n      return (\n        <IconNB\n          ref={this.setRoot}\n          {...this.props}\n          name={IS_IOS ? this.props.ios : this.props.android}\n        />\n      );\n    } else if (this.props.name && (this.props.android || this.props.ios)) {\n      return (\n        <IconNB\n          ref={this.setRoot}\n          {...this.props}\n          name={this.getIconName()}\n        />\n      );\n    }\n    return (\n      <IconNB\n        ref={this.setRoot}\n        {...this.props}\n        name={this.getName()}\n      />\n    );\n  }\n}\n\nIcon.propTypes = {\n  ...IconNB.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  name: PropTypes.string,\n  ios: PropTypes.string,\n  android: PropTypes.string,\n  active: PropTypes.bool,\n  type: PropTypes.string\n};\n\nconst StyledIcon = connectStyle('NativeBase.Icon', {}, mapPropsToStyleNames)(\n  Icon\n);\n\nexport { StyledIcon as Icon };\n"]}